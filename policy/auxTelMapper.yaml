defects: ../description/defects

needCalibRegistry: true

levels:
  tract: patch

defaultLevel: visit

exposures:
  _raw:  # the actual raw files, on disk
    level: Ccd
    persistable: PropertyList
    python: lsst.daf.base.PropertyList
    storage: FitsStorage
    tables: raw
    template: raw/%(ccd)s/%(ccd)s-%(visit)06d.fits[0]
  raw:  # fake raws, for doing the assembly
    assembler: lsst.obs.auxTel.auxTelMapper.assemble_raw
    composite:
      raw_amp:
        datasetType: raw_amp
        subset: true
      raw_hdu:
        datasetType: raw_hdu
    inputOnly: true
  raw_amp:  # the actual raw files, on disk, at the per-amplifier level
    level: Amp
    # NB If type is changed to an exposureI then constructDark breaks. If changing this be sure to test calibs
    persistable: DecoratedImageI
    python: lsst.afw.image.DecoratedImageI
    storage: FitsStorage
    tables: raw
    template: raw/%(ccd)s/%(ccd)s-%(visit)06d.fits[%(channel)d]
  postISRCCD:  # exposure after instrument signature removal
    template: postISRCCD/postISRCCD_v%(visit)d_%(ccd)s_f%(filter)s.fits
  calexp:  # exposure after CharImageTask and CalibrateTask
    template: calexp/calexp_v%(visit)d_%(ccd)s_f%(filter)s.fits
  icExp:  # exposure after running CharImageTask, but uncalibrated
    template: icExp/icExp_v%(visit)d_%(ccd)s_f%(filter)s.fits
  wcs:
    tables:
    - raw
    - raw_visit
    template: wcs/v%(visit)d_%(ccd)s_f%(filter)s.wcs.fits

 # technical debt: defaults for all these should exist in obs_base
 # TODO: DM-13308
calibrations:
  bias:  # master bias frame in the calibration registry, as produced by constructBias.py
    columns:
    - date
    level: Ccd
    obsTimeName: date
    persistable: ExposureF
    python: lsst.afw.image.ExposureF
    refCols:
    - visit
    reference: raw_visit
    storage: FitsStorage
    tables: bias
    template: bias/%(calibDate)s/bias-%(ccd)s-%(calibDate)s.fits
    validRange: true
  dark:  # master dark frame in the calibration registry, as produced by constructDark.py
    columns:
    - date
    level: Ccd
    obsTimeName: date
    persistable: ExposureF
    python: lsst.afw.image.ExposureF
    refCols:
    - visit
    reference: raw_visit
    storage: FitsStorage
    tables: dark
    template: dark/%(calibDate)s/dark-%(ccd)s-%(calibDate)s.fits
    validRange: true
  flat:  # master flat frame in the calibration registry, as produced by constructFlat.py
    columns:
    - date
    - filter
    filter: true
    level: Ccd
    obsTimeName: date
    persistable: ExposureF
    python: lsst.afw.image.ExposureF
    refCols:
    - visit
    - filter
    reference: raw_visit
    storage: FitsStorage
    tables: flat
    template: flat/%(filter)s/%(calibDate)s/flat_%(ccd)s-%(filter)s_%(calibDate)s.fits
    validRange: true
  fringe:  # master fringe frame in the calibration registry, as produced by constructFringe.py
    columns:
    - date
    - filter
    filter: true
    level: Ccd
    obsTimeName: date
    persistable: ExposureF
    python: lsst.afw.image.ExposureF
    refCols:
    - visit
    - filter
    reference: raw_visit
    storage: FitsStorage
    tables: flat
    template: fringe/%(filter)s/%(calibDate)s/fringe_%(ccd)s-%(filter)s_%(calibDate)s.fits
    validRange: true

datasets:
# datasets removed that might be needed and hard to trace:
# ampExposureId, ampExposureId_bits, ccdExposureId, ccdExposureId_bits
# (defaults should probably exist in obs_base)
  raw_hdu:  # the raw_hdus. This needs to be "mapped" and therefore needs including here, apparently.
    level: Ccd
    persistable: PropertyList
    python: lsst.daf.base.propertyList
    storage: FitsStorage
    tables: raw
    template: raw/%(ccd)s/%(ccd)s-%(visit)06d.fits[0]
  eotest_gain:  # the per-amplifier gains, as measured by eotest
    level: Ccd
    persistable: PropertySet
    python: lsst.daf.base.PropertySet
    storage: YamlStorage
    tables: raw
    template: gain/%(run)s/gain%(ccd)s_%(run)s.yaml
